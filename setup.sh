#!/bin/sh
printf "\n\n\033[0;32m ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████\033[0m\n"
printf "\033[0;32m █░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███░░░░░░██░░░░░░█░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█\033[0m\n"
printf "\033[0;32m █░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░░░░░░░░░█░░░░░░▄▀░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░██░░▄▀░░█░░░░▄▀░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░█████████████░░▄▀░░█████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░████░░▄▀░░███░░▄▀░░██░░▄▀░░███░░▄▀░░███░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░█████████\033[0m\n"
printf "\033[0;32m █░░▄▀░░░░░░░░░░█████░░▄▀░░█████░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░██░░▄▀░░███░░▄▀░░███░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█\033[0m\n"
printf "\033[0;32m █░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░█████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀░░██░░▄▀░░███░░▄▀░░███░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░░░░░░░░░█████░░▄▀░░█████░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░░░███░░▄▀░░██░░▄▀░░███░░▄▀░░███░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░░░░░░░░░▄▀░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░█████████████░░▄▀░░█████████████░░▄▀░░█░░▄▀░░█████████░░▄▀░░██░░▄▀░░█████░░▄▀▄▀░░▄▀▄▀░░███░░▄▀░░███░░▄▀░░█████████░░▄▀░░█████████████████░░▄▀░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░█████████████░░▄▀░░█████░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░░░░░█░░░░▄▀▄▀▄▀░░░░█░░░░▄▀░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░░░░░░░░░▄▀░░█\033[0m\n"
printf "\033[0;32m █░░▄▀░░█████████████░░▄▀░░█████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀░░███░░░░▄▀░░░░███░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█\033[0m\n"
printf "\033[0;32m █░░░░░░█████████████░░░░░░█████░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██░░░░░░░░░░█████░░░░░░█████░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█\033[0m\n"
printf "\033[0;32m ███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████\033[0m\n\n\n"

# Install metallb
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml
# On first install only
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
# ConfigMap
kubectl apply -f ./srcs/metallb-config.yaml

arr=(
    mysql
    phpmyadmin
    nginx
    wordpress
    ftps
    influxdb
    grafana
)

# function install_kube(){
#     which brew &> /dev/null
#     if [ !]
# }

function start_up(){
    if [[ $1 == "delete" ]]; then
        echo "-------delete-------"
        for k in "${arr[@]}"; do
            kubectl delete -f ./srcs/$k-deployment.yaml
        done
        echo "------- done -------"
    elif [[ $1 == "start" ]]; then
        echo "-------create-------"
        for i in "${arr[@]}"; do
            docker build -t $i ./srcs/$i
        done
        # Create secret for mysql
        kubectl apply -f ./srcs/secret.yaml
        # Create volumes
        kubectl apply -f ./srcs/PersistentVolume.yaml
        for j in "${arr[@]}"; do
            kubectl apply -f ./srcs/$j-deployment.yaml
        done
        echo "------- done -------"
    fi
}
start_up $1